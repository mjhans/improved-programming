<1> stdout = 터미널 콘솔창을 의미, 콘솔에 직접 값을 쓸수 있다. flush는 버퍼에 남아 있는 값을 다 쓰게 함

<2> itertools.cycle은 주어진 시퀀스를 계속 순회하면서 끝없이 항목을 생성 

<3> \x08은 백스페이스 특수 문자를 status 길이 만큼 지운다. 2~3은 루프를 반복하면서 글을 쓰고 지우는 작업을 한다. 텍스트모드 애니메이션

<4> 슬립함수로 0.1초동안 잠시 멈추는데, time.sleep이 아닌 asyncio.sleep함수를 쓴다. time.sleep이 awaitable이 아니기 때문이다. awaitable로 구현하더라도 제어권을 넘길수 있도록 코루틴으로 작성되어야 한다.

<5> asyncio.CancelledError 예외가 발생하면 코루틴의 취소가 요청 된것이므로 루프를 종료한다. 로직 설계나름니다.

<6> 공백문자로 같은 라인은 덮어쓰고, 백스페이스로 커서를 앞으로 옮긴다

<7> 코루틴이 잠시 기동을 멈추고, 입출력 하는 척 하기 위한 함수 

<8> 대표 코루틴 역할을 한다.

<9> asyncio는 이벤트 루프로 동작한다. 코루틴의 실행을 스케줄링 하기 위해서 asyncio에 등록하고, 등록한 task 객체를 반환한다. 

<10> task 객체를 출력

<11> 7번의 정의한 코루틴을 실행시미고 기다린다.

<12> spinner task에 cancel 함수를 실행해서 spin 코루틴에 asyncio.Cancelled Error를 발생시킨다.

<13> asyncio모듈을 이용해서 코루틴을 구동한다.  run 코루틴이 모두 종료되면 supervisor 함수의 반환값을 갖고온다.